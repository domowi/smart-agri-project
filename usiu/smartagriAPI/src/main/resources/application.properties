# ===================================================
# = API PROPERTIES
# ===================================================
server.port=8090

spring.datasource.url=jdbc:mysql://localhost:3306/smart_agri
spring.datasource.username=root
spring.datasource.password=root

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1


# ===================================================
# = MACHINE LEARNING MODEL REST API PROPERTIES
# ===================================================
url.model-train-api = http://localhost:5000/model
url.model-predict-api = http://localhost:5000/predict


# ===============================
# = FILE STORAGE PROPERTIES
# ===============================
# All files uploaded through the REST API will be stored in this directory
#file.upload-train-dir=C:/Users/odhiambod/SmartAgri/SpringFileUploadDemo/train
#file.upload-predict-dir=C:/Users/odhiambod/SmartAgri/SpringFileUploadDemo/predict
file.upload-dir=C:/Users/odhiambod/SmartAgri/SmartAgriML/upload_dir

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

# spring file upload properties (ORIGINAL  smartagriAPI)
#spring.servlet.multipart.max-file-size=128KB
#spring.servlet.multipart.max-request-size=128KB
#spring.http.multipart.enabled=false


# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update

# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect


